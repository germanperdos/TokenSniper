import time
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton

# üîê –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞
TOKEN = "8095404561:AAFVTgtiLbWoI_YbrNV_9TlSzI1rqgfFqeY"
CHAT_ID = -1002744594411  # —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞

# üîë –ö–ª—é—á OpenRouter
OPENROUTER_API_KEY = "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"

def generate_summary(title, url):
    prompt = f"""
–¢—ã ‚Äî –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –≤—ã–∂–∏–º–∫—É –¥–ª—è Telegram:

üîπ –ì–¥–µ ‚Äî –±–∏—Ä–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Binance)  
üîπ –ß—Ç–æ ‚Äî –º–æ–Ω–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, FLOKI)  
üîπ –ö–æ–≥–¥–∞ ‚Äî –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤ (–≤ –ú–°–ö)  
üîπ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)  

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

üîî Binance –¥–æ–±–∞–≤–ª—è–µ—Ç –º–æ–Ω–µ—Ç—É ABC  
üïí 22 –∏—é–ª—è, 15:00 –ú–°–ö  
ü™ô ABC ‚Äî —ç—Ç–æ –º–æ–Ω–µ—Ç–∞ –¥–ª—è Web3 –∏ DeFi

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}  
–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {url}
"""

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/TokenSniperNews",
        "Content-Type": "application/json"
    }

    data = {
        "model": "meta-llama/llama-3-70b-instruct",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç–∞"},
            {"role": "user", "content": prompt}
        ]
    }

    response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"].strip()
    else:
        print("‚ùå –û—à–∏–±–∫–∞ OpenRouter:", response.text)
        return f"üîî {title}\n‚ö†Ô∏è GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

def send_to_telegram(title, url, summary):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∞ –ß–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", url=url)]
    ])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –¥–µ–π—Å—Ç–≤–∏—è
    lower_title = title.lower()
    if "–ª–∏—Å—Ç" in lower_title or "will list" in lower_title or "add" in lower_title:
        action = "<b>üü¢ –¥–æ–±–∞–≤–ª—è–µ—Ç</b>"
    elif "–¥–µ–ª–∏—Å—Ç" in lower_title or "remove" in lower_title or "delist" in lower_title:
        action = "<b>‚ùå —É–¥–∞–ª—è–µ—Ç</b>"
    else:
        action = "<b>‚ÑπÔ∏è –æ–±–Ω–æ–≤–ª—è–µ—Ç</b>"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∏—Ä–∂—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: Binance)
    exchange = title.split()[0].strip()

    message = f"""
üîî <b>{exchange}</b> {action} –º–æ–Ω–µ—Ç—É  
{summary}

üîó –ü–æ–¥–ø–∏—à–∏—Å—å: @TokenSniperNews
""".strip()

    Bot(token=TOKEN).send_message(
        chat_id=CHAT_ID,
        text=message,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

def fetch_binance_announcements(url):
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    driver.get(url)
    time.sleep(3)

    elements = driver.find_elements("xpath", "//a[contains(@href, '/en/support/announcement/')]")
    announcements = []

    for el in elements:
        href = el.get_attribute("href")
        title = el.text.strip()
        if title and ("Will List" in title or "Delist" in title or "Delisting" in title):
            announcements.append((title, href))

    driver.quit()
    return announcements

if __name__ == "__main__":
    urls = {
        "–õ–∏—Å—Ç–∏–Ω–≥–∏": "https://www.binance.com/en/support/announcement/c-48",
        "–î–µ–ª–∏—Å—Ç–∏–Ω–≥–∏": "https://www.binance.com/en/support/announcement/c-59"
    }

    for name, url in urls.items():
        print(f"\nüîç –ß–µ–∫–∞–µ–º: {name}")
        data = fetch_binance_announcements(url)
        for title, link in data:
            print(f"{title} ‚Üí {link}")
            try:
                summary = generate_summary(title, link)
            except Exception as e:
                print("‚ùå GPT-–æ—à–∏–±–∫–∞:", e)
                summary = f"üîî {title}\n‚ö†Ô∏è GPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
            send_to_telegram(title, link, summary)
